{"ast":null,"code":"var _jsxFileName = \"/home/amine/Desktop/Projects/FSO/part1_exo/src/App.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\n/*\nconst Button = ({handleClick, text}) => {\n\treturn (\n\t\t<button onClick={handleClick}>{text}</button>\n\t)\n\n}\n\nconst StatisticLine = ({text, value}) => {\n\treturn (<p>{text} {value}</p>)\n}\nconst Statistics = (props) => {\n\tif(props.data.good == 0 && props.data.neutral == 0 && props.data.bad == 0) \n\treturn (<div><p>No feedback given</p></div>)\n\n\treturn (\n\t\t<div>\n\t\t\t<StatisticLine text=\"good\" value ={props.data.good} />\n\t\t\t<StatisticLine text=\"neutral\" value ={props.data.neutral} />\n\t\t\t<StatisticLine text=\"bad\" value ={props.data.bad} />\n\t\t\t<StatisticLine text=\"all\" value ={props.data.all} />\n\t\t\t<StatisticLine text=\"average\" value ={props.data.average} />\n\t\t\t<StatisticLine text=\"positive\" value ={props.data.positive} />\n\t\t</div>\n\n\t)\n}\n\nconst App = () => {\n  // save clicks of each button to its own state\n  const [good, setGood] = useState(0)\n  const [neutral, setNeutral] = useState(0)\n  const [bad, setBad] = useState(0)\n  const [all, setAll] = useState(0)\n  const [average, setAverage] = useState(0)\n  const [positive, setPositive] = useState(0)\n\n  const data = {good: good, \n\tneutral: neutral, \n\tbad: bad, \n\tall: all, \n\taverage: average, \n\tpositive: positive}\n\n  const handlerGood = () => {\n\tsetGood(good+1)\n\tsetAll(good+bad+neutral+1)\n\tsetAverage((good+1-bad)/(good+bad+neutral+1))\n\tsetPositive((good+1)/(good+bad+neutral+1)*100)\n}\n  const handlerNeutral = () => {\n\tsetNeutral(neutral+1)\n\tsetAll(good+bad+neutral+1)\n\tsetAverage((good-bad)/(good+bad+neutral+1))\n\tsetPositive((good)/(good+bad+neutral+1)*100)\n}\n  const handlerBad = () => {\n\tsetBad(bad+1)\n\tsetAll(good+bad+neutral+1)\n\tsetAverage((good-bad-1)/(good+bad+neutral+1))\n\tsetPositive((good)/(good+bad+neutral+1)*100)\n}\n\n\n  return (\n    <div>\n\t\t<h1>five feedback</h1>\n\t\t<Button handleClick={handlerGood} text='good'/>\n\t\t<Button handleClick={handlerNeutral} text='neutral'/>\n\t\t<Button handleClick={handlerBad} text='bad'/>\n\n\t\t<h1>Statistics</h1>\n\n\t\t<Statistics data={data}/>\n\n\t\n\n    </div>\n  )\n}\n*/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const anecdotes = ['If it hurts, do it more often.', 'Adding manpower to a late software project makes it later!', 'The first 90 percent of the code accounts for the first 10 percent of the development time...The remaining 10 percent of the code accounts for the other 90 percent of the development time.', 'Any fool can write code that a computer can understand. Good programmers write code that humans can understand.', 'Premature optimization is the root of all evil.', 'Debugging is twice as hard as writing the code in the first place. Therefore, if you write the code as cleverly as possible, you are, by definition, not smart enough to debug it.', 'Programming without an extremely heavy use of console.log is same as if a doctor would refuse to use x-rays or blood tests when diagnosing patients.', 'The only way to go fast, is to go well.'];\n  const [selected, setSelected] = useState(0);\n  const [votes, setVotes] = useState(0);\n  const handleNext = () => {\n    if (selected < anecdotes.length - 1) setSelected(selected + 1);else setSelected(0);\n  };\n  const handleVote = () => {};\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: anecdotes[selected]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"has \", votes, \" votes\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleNext,\n      children: \"next anecdote\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleVote,\n      children: \"Vote\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 3\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 3\n  }, this);\n};\n_s(App, \"lMr9zrxGx/W1i14ppebEEh2r+Ek=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","App","_s","anecdotes","selected","setSelected","votes","setVotes","handleNext","length","handleVote","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/home/amine/Desktop/Projects/FSO/part1_exo/src/App.js"],"sourcesContent":["import {useState} from 'react'\n/*\nconst Button = ({handleClick, text}) => {\n\treturn (\n\t\t<button onClick={handleClick}>{text}</button>\n\t)\n\n}\n\nconst StatisticLine = ({text, value}) => {\n\treturn (<p>{text} {value}</p>)\n}\nconst Statistics = (props) => {\n\tif(props.data.good == 0 && props.data.neutral == 0 && props.data.bad == 0) \n\treturn (<div><p>No feedback given</p></div>)\n\n\treturn (\n\t\t<div>\n\t\t\t<StatisticLine text=\"good\" value ={props.data.good} />\n\t\t\t<StatisticLine text=\"neutral\" value ={props.data.neutral} />\n\t\t\t<StatisticLine text=\"bad\" value ={props.data.bad} />\n\t\t\t<StatisticLine text=\"all\" value ={props.data.all} />\n\t\t\t<StatisticLine text=\"average\" value ={props.data.average} />\n\t\t\t<StatisticLine text=\"positive\" value ={props.data.positive} />\n\t\t</div>\n\n\t)\n}\n\nconst App = () => {\n  // save clicks of each button to its own state\n  const [good, setGood] = useState(0)\n  const [neutral, setNeutral] = useState(0)\n  const [bad, setBad] = useState(0)\n  const [all, setAll] = useState(0)\n  const [average, setAverage] = useState(0)\n  const [positive, setPositive] = useState(0)\n\n  const data = {good: good, \n\tneutral: neutral, \n\tbad: bad, \n\tall: all, \n\taverage: average, \n\tpositive: positive}\n\n  const handlerGood = () => {\n\tsetGood(good+1)\n\tsetAll(good+bad+neutral+1)\n\tsetAverage((good+1-bad)/(good+bad+neutral+1))\n\tsetPositive((good+1)/(good+bad+neutral+1)*100)\n}\n  const handlerNeutral = () => {\n\tsetNeutral(neutral+1)\n\tsetAll(good+bad+neutral+1)\n\tsetAverage((good-bad)/(good+bad+neutral+1))\n\tsetPositive((good)/(good+bad+neutral+1)*100)\n}\n  const handlerBad = () => {\n\tsetBad(bad+1)\n\tsetAll(good+bad+neutral+1)\n\tsetAverage((good-bad-1)/(good+bad+neutral+1))\n\tsetPositive((good)/(good+bad+neutral+1)*100)\n}\n\n\n  return (\n    <div>\n\t\t<h1>five feedback</h1>\n\t\t<Button handleClick={handlerGood} text='good'/>\n\t\t<Button handleClick={handlerNeutral} text='neutral'/>\n\t\t<Button handleClick={handlerBad} text='bad'/>\n\n\t\t<h1>Statistics</h1>\n\n\t\t<Statistics data={data}/>\n\n\t\n\n    </div>\n  )\n}\n*/\n\n\nconst App = () => {\n\tconst anecdotes = [\n\t\t'If it hurts, do it more often.',\n\t\t'Adding manpower to a late software project makes it later!',\n\t\t'The first 90 percent of the code accounts for the first 10 percent of the development time...The remaining 10 percent of the code accounts for the other 90 percent of the development time.',\n\t\t'Any fool can write code that a computer can understand. Good programmers write code that humans can understand.',\n\t\t'Premature optimization is the root of all evil.',\n\t\t'Debugging is twice as hard as writing the code in the first place. Therefore, if you write the code as cleverly as possible, you are, by definition, not smart enough to debug it.',\n\t\t'Programming without an extremely heavy use of console.log is same as if a doctor would refuse to use x-rays or blood tests when diagnosing patients.',\n\t\t'The only way to go fast, is to go well.'\n\t  ]\n\t   \n\t  const [selected, setSelected] = useState(0)\n\t  const [votes, setVotes] = useState(0)\n\t  \n\t  const handleNext = () => {\n\t\tif(selected < anecdotes.length-1) setSelected(selected+1)\n\t\telse setSelected(0)\n\t}\n\n\tconst handleVote = () => {}\n\n\t  return (\n\t\t<div>\n\t\t<p>{anecdotes[selected]}</p> \n\t\t<p>has {votes} votes</p>\n\t\t<button onClick={handleNext}>next anecdote</button>\n\t\t<button onClick={handleVote}>Vote</button>\n\n\t\t</div>\n\t  )\n}\n\nexport default App;\n"],"mappings":";;AAAA,SAAQA,QAAQ,QAAO,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhFA,SAAAC,MAAA,IAAAC,OAAA;AAmFA,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjB,MAAMC,SAAS,GAAG,CACjB,gCAAgC,EAChC,4DAA4D,EAC5D,8LAA8L,EAC9L,iHAAiH,EACjH,iDAAiD,EACjD,oLAAoL,EACpL,sJAAsJ,EACtJ,yCAAyC,CACvC;EAED,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAC,CAAC,CAAC;EAC3C,MAAM,CAACQ,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,CAAC,CAAC;EAErC,MAAMU,UAAU,GAAGA,CAAA,KAAM;IAC1B,IAAGJ,QAAQ,GAAGD,SAAS,CAACM,MAAM,GAAC,CAAC,EAAEJ,WAAW,CAACD,QAAQ,GAAC,CAAC,CAAC,MACpDC,WAAW,CAAC,CAAC,CAAC;EACpB,CAAC;EAED,MAAMK,UAAU,GAAGA,CAAA,KAAM,CAAC,CAAC;EAEzB,oBACDV,OAAA;IAAAW,QAAA,gBACAX,OAAA;MAAAW,QAAA,EAAIR,SAAS,CAACC,QAAQ;IAAC;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAK,eAC5Bf,OAAA;MAAAW,QAAA,GAAG,MAAI,EAACL,KAAK,EAAC,QAAM;IAAA;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAI,eACxBf,OAAA;MAAQgB,OAAO,EAAER,UAAW;MAAAG,QAAA,EAAC;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAS,eACnDf,OAAA;MAAQgB,OAAO,EAAEN,UAAW;MAAAC,QAAA,EAAC;IAAI;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAS;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAEpC;AAER,CAAC;AAAAb,EAAA,CA/BKD,GAAG;AAAAgB,EAAA,GAAHhB,GAAG;AAiCT,eAAeA,GAAG;AAAC,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}